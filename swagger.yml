openapi: 3.0.3
info:
  title: BookselfAPI
  description: >
    BookselfAPI is a Django REST Framework API to run a bookstore online. You can add, delete, and manage books wherever and whenever you want (with authorization). Although, you can order them through MonobankAPI's acquiring integration (payment is fake, so do not worry to try it). We use postgreSQL DB. 
  version: 3.1-beta.1
  license:
    name: MIT License
    url: https://github.com/yo1am1/bookstoreAPI/blob/main/LICENSE
  contact:
    name: API Creator
    url: https://cryptic-river-21647-7efe93940f14.herokuapp.com/portfolio
    email: bigdiebam@gmail.com
servers:
  - url: https://cryptic-river-21647-7efe93940f14.herokuapp.com/api_v3/
  - url: http://127.0.0.1:8000/api_v3/
tags:
  - name: books
    description: Book-related interactions
  - name: authors
    description: Author interactions
  - name: orders
    description: User order management
  - name: users
    description: User interactions
paths:
  /books/:
    get:
      tags:
        - books
      summary: Retrieve Books
      description: Get a list of books with optional filters.
      operationId: getBooks
      parameters:
        - name: search
          in: query
          description: Search by title and by id
          schema:
            type: string
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Book'
        '404':
          description: No books found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Book_does_not_found'
  /books/create/:
    post:
      security:
        - bearerAuth: []
      tags:
        - books
      summary: Add New Book
      description: Add a new book and author to the shelf.
      operationId: addBook
      requestBody:
        description: New book details
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Book_post_request_body'
        required: true
      responses:
        '201':
          description: Book added successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Book_created'
        '400':
          description: Book already exists
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Book_exists'
  /books/{bookId}:
    get:
      tags:
        - books
      summary: Get Book by ID
      description: Retrieve a single book by its ID.
      operationId: getBookById
      parameters:
        - name: bookId
          in: path
          description: ID of the book
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Book'
        '404':
          description: Book not found
  /books/update/{bookId}/:
    put:
      security:
        - bearerAuth: []
      tags:
        - books
      summary: Update Book by ID
      description: Update details of a book by its ID.
      operationId: updateBook
      parameters:
        - name: bookId
          in: path
          description: ID of the book
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        description: Updated book details
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Book_put_request_body'
        required: true
      responses:
        '200':
          description: Book updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Book_after_update'
        '404':
          description: Book not found
  /books/delete/{bookId}/:
    delete:
      security:
        - bearerAuth: []
      tags:
        - books
      summary: Delete Book by ID
      description: Delete a book by its ID.
      operationId: deleteBook
      parameters:
        - name: bookId
          in: path
          description: ID of the book
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '204':
          description: Book deleted successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Book_after_delete'
        '400':
          description: Book does not exist
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Book_does_not_exist_delete'
  /authors/:
    get:
      tags:
        - authors
      summary: List Authors
      description: Retrieve a list of authors with optional filters.
      operationId: getAuthors
      parameters:
        - name: search
          in: query
          description: Search by author's name and id
          schema:
            type: string
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Author'
        '404':
          description: Authors not found
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Author_does_not_exist'
  /authors/{authorId}:
    get:
      tags:
        - authors
      summary: Get Author by ID
      description: Retrieve a single author by their ID.
      parameters:
        - name: authorId
          in: path
          description: ID of the author
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Author'
        '404':
          description: Author not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Author_does_not_exist'
  /authors/create/:
    post:
      security:
        - bearerAuth: []
      tags:
        - authors
      summary: Add New Author
      description: Add a new author to the shelf.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AuthorInput'
      responses:
        '201':
          description: Author added successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Author'
  /authors/update/{authoriId}/:
    put:
      security:
        - bearerAuth: []
      tags:
        - authors
      summary: Update Author
      description: Update details of an author by their ID.
      parameters:
        - name: authoriId
          in: path
          description: ID of the author
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AuthorInput'
      responses:
        '200':
          description: Author updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Author'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Author_update_unauthorised'
        '404':
          description: Author not found
  /authors/delete/{id}:
    delete:
      security:
        - bearerAuth: []
      tags:
        - authors
      summary: Delete Author
      description: Delete an author by their ID.
      parameters:
        - name: id
          in: path
          description: ID of the author
          required: true
          schema:
              type: integer
      responses:
        '204':
          description: Author deleted successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Author'
        '404':
          description: Author not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Author_does_not_exist'
  /order/:
    post:
      tags:
        - orders
      summary: Order New Book
      description: Place an order for one or more books.
      requestBody:
        required: true
        content:  
          application/json:
            schema:
              $ref:  '#/components/schemas/Order_creation'
            examples:
              "Buy a book":
                value:
                  order:
                    [ { "book_id": 1, "amount": 1 } ]
              "Buy two different books":
                value:
                  order:
                    [ { "book_id": 1, "amount": 2 }, { "book_id": 4, "amount": 10 } ]              
      responses:
        '201':
          description: Order placed successfully
          content:
              application/json:
                schema:
                  $ref: '#/components/schemas/MonoAnswer'
        '400':
          description: Order creation failed
          content:
              application/json:
                schema:
                  $ref: '#/components/schemas/OrderCreationFailed'   
  /orders/:
    get:
      tags:
        - orders
      summary: List of orders
      description: Get the list of orders on this platform
      responses:
        '200':
          description: Get request succeded
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OrdersList'     
        
  /users/register/:
    post:
      tags:
        - users
      summary: User Registration
      description: Register a new user.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserRegistration'
      responses:
        '201':
          description: User registered successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '400':
          description: User creation failed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User_creation_error'
  /users/login/:
    post:
      tags:
        - users
      summary: User Login
      description: Log in a user.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserLogin'
      responses:
        '200':
          description: Login successful
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User_login_successful'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User_login_error_form'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User_login_error'

components:
  schemas:
    Book:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 3
        title:
          type: string
          example: The Lord of the Rings
        publish_year:
          type: integer
          example: 1954
        author:
          type: integer
          example: 1
        genre:
          type: string
          example: Fantasy
        price:
          type: integer
          example: 11111
        amount:
          type: integer
          example: 10

    Book_created:
      type: object
      properties:
        id:
          type: integer
          example: 7
        title:
          type: string
          example: The Lord of the Rings
        publish_year:
          type: integer
          example: 1954
        author:
          type: integer
          example: 1
        genre:
          type: string
          example: Fantasy

    Book_does_not_found:
      type: object
      properties:
        message:
          type: string
          example: No books found

    Book_exists:
      type: object
      properties:
        message:
          type: string
          example: Book already exists

    Book_after_update:
      type: object
      properties:
        message:
          type: string
          example: Book updated successfully

    Book_after_delete:
      type: object
      properties:
        message:
          type: string
          example: Book deleted successfully

    Book_does_not_exist_delete:
      type: object
      properties:
        message:
          type: string
          example: Book does not exist

    Author:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 1
        name:
          type: string
          example: J.R.R. Tolkien
    
    Author_update_unauthorised:
      type: object
      properties:
        detail:
          type: string
          example: Authentication credentials were not provided.
          
    Author_does_not_exist:
      type: object
      properties:
        message:
          type: string
          example: Author not found

    AuthorInput:
      type: object
      properties:
        name:
          type: string
          example: J.K. Rowling
    Order_creation:
      type: object
      properties:
        order:
          type: array
          items:
            type: object
            properties:
              book_id:
                type: integer
                example: 2
              amount:
                type: integer
                example: 1
            required:
              - book_id
              - amount
          example:
            - book_id: 2
              amount: 1
            - book_id: 3
              amount: 12

    MonoAnswer:
      type: object
      properties:
        url:
          type: string
          example: https://pay.mbnk.biz/230806AHZonZQnpXi7EX?orderId=23080662FNZjxVH8jZRj
        id:
          type: integer
          example: 7

    OrderCreationFailed:
      type: object
      properties:
        detail:
          type: string
          example: "JSON parse error - Expecting property name enclosed in double quotes: line ... column ... (char ...)"
    
    OrdersList:
      type: object
      properties:
        count:
          type: integer
          example: 2
        next:
          type: string
          example: https://test.com/api_v3/books/?limit=5
        previous:
          type: string
          example: null
        results:
          type: array
          items: 
            type: object
            example:
              - title: M4A1-S
                genre: "Drama"
                author: 1
                price: 42000
                amount: 498
                id: 1
                publish_year: 2015
              - title: "Sunday"
                genre: "Biography"
                author: 2
                price: 100
                amount: 8000000
                id: 2
                publish_year: 2023
    UserRegistration:
      type: object
      properties:
        username:
          type: string
          example: user123
        email:
          type: string
          example: b@test.com
        password:
          type: string
          example: mysecretpassword244685

    User:
      type: object
      properties:
        username:
          type: string
          example: user123
        email:
          type: string
          example: b@test.com

    User_creation_error:
      type: object
      properties:
        message:
          type: string
          example: User creation failed

    UserLogin:
      type: object
      properties:
        username:
          type: string
          example: user123
        password:
          type: string
          example: mysecretpassword244685

    User_login_successful:
      type: object
      properties:
        refresh:
          type: string
          example: your_refresh_token
        access:
          type: string
          example: your_access_token
        email:
          type: string
          example: b@test.com

    User_login_error_form:
      type: object
      properties:
        detail:
          type: string
          example: "JSON parse error - Expecting property name enclosed in double quotes: line 3 column 40 (char 66)"

    User_login_error:
      type: object
      properties:
        message:
          type: string
          example: "No active account found with the given credentials"
    Book_post_request_body:
      type: object
      properties:
        title:
          type: string
          example: The Adventures of Sherlock Holmes
        author:
          type: integer
          example: 1
        genre:
          type: string
          example: Novel
        publish_year:
          type: string
          example: 1892
        price:
          type: integer
          example: 25000
        amount:
          type: integer
          example: 10000

    Book_put_request_body:
      type: object
      properties:
        title:
          type: string
          example: Updated Title
        author:
          type: integer
          example: 2
        genre:
          type: string
          example: Mystery
        publish_year:
          type: integer
          example: 2023
        price:
          type: integer
          example: 25000
        amount:
          type: integer
          example: 10000
    
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
